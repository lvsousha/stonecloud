<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd  
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx.xsd  
	    http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/task
	    http://www.springframework.org/schema/task/spring-task.xsd
	    http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/data/jpa 
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-autowire="byName">
	<context:property-placeholder location="classpath:config.properties" />
	<!-- 引入spring注解 -->
	<context:annotation-config />
	<!-- 配置注解扫描目录 -->
	<context:component-scan base-package="com.stone.webapp">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="timeBetweenEvictionRunsMillis" value="1800000" />
        <property name="removeAbandonedOnBorrow" value="true" />
        <property name="removeAbandonedTimeout" value="60" />
        <property name="initialSize" value="5" />
        <property name="maxTotal" value="50" />
        <property name="maxWaitMillis" value="9000" />
        <property name="maxIdle" value="30" />
        <property name="minIdle" value="5" />
        <property name="logAbandoned" value="true"></property>
        <property name="fastFailValidation" value="true" />
    </bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean name="log" class="org.apache.log4j.Logger" factory-method="getRootLogger"></bean>
	
	<!--jpa配置——START-->
	
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--适配器-->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <!--扫描包-->
        <property name="packagesToScan" value="com"/>
        <!--基本配置-->
        <property name="jpaProperties">
            <props>
                <!--命名策略-->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <!--基本配置-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!--二级缓存-->
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
            </props>
        </property>
        <property name="sharedCacheMode" value="ENABLE_SELECTIVE"/>
    </bean>
 
    <!--配置事务-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <jpa:repositories base-package="com.stone.webapp.dao" entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>
    
    <!--jpa配置——END-->
 
 	<!--事务配置——START-->
    
    <!-- 配置哪些方法要增加事务控制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 让全部的方法都增加事务管理，为了提高效率。能够把一些查询之类的方法设置为仅仅读的事务 -->
            <!-- rollack-for 若没有配置该项，则只对运行期异常进行回滚 -->
            <tx:method name="*" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <!-- 下面方法都是可能设计改动的方法。就无法设置为仅仅读 -->
            <tx:method name="select*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

	<!-- 配置AOP。Spring是通过AOP来进行事务管理的 -->
    <aop:config>
        <!-- 设置pointCut表示哪些方法要增加事务处理 -->
        <!-- 下面的事务是声明在DAO中，可是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时假设在运行了一个步骤之后抛出异常 就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service。这也就是Spring所提供的一个很方便的工具。声明式事务 -->
        <aop:pointcut id="allMethods" expression="execution(* com.stone.webapp.service.*.*(..))" />
        <!-- 通过advisor来确定详细要增加事务控制的方法 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
    </aop:config>

	<!-- 开启事务注解 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    
    <!--事务配置——END-->

</beans>
