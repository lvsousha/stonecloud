<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd  
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx.xsd  
	    http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/task
	    http://www.springframework.org/schema/task/spring-task.xsd
	    http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd"
	>
	<context:property-placeholder location="classpath:config.properties" />
	<!-- 引入spring注解 -->
	<context:annotation-config />
	<!-- 配置注解扫描目录 -->
	<context:component-scan base-package="com.stone.webapp.**" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 支持异步方法执行 -->
	<task:executor id="myexecutor" pool-size="5" />
	<task:annotation-driven executor="myexecutor" />

	<!-- 阿里 druid 数据库连接池 https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="filters" value="${filters}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 持久层 采用mybatis -->
	<!-- <bean id="sqlSessionFactoryBeanName" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="configLocation" 
		value="classpath:mybatis.xml" /> <property name="typeAliasesPackage" value="com.stone.webapp.mapper" 
		/> <property name="mapperLocations" value="classpath*:mapper/*.xml" /> </bean> 
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.stone.webapp.mapper" /> </bean> -->

	<!-- 持久层 采用mybatisplus -->
	<bean id="sqlSessionFactory"
		class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置实体扫描路径，多个package可以用分号; 逗号, 分隔， 支持通配符* -->
		<!-- com.a.b.entity;com.a.c.entity;com.d.*.entity -->
		<property name="typeAliasesPackage" value="com.stone.webapp.model" />
		<property name="configuration" ref="mybatisConfig" />
		<!-- MP 全局配置注入 -->
		<property name="globalConfig" ref="globalConfig" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor"
					class="com.baomidou.mybatisplus.plugins.PaginationInterceptor" />
				<!-- 乐观锁插件 -->
				<bean id="optimisticLockerInterceptor"
					class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor">
				</bean>
				<!-- 性能拦截器，兼打印sql，不建议生产环境配置 -->
				<bean id="performanceInterceptor"
					class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor" />
			</array>
		</property>
	</bean>

	<bean id="mybatisConfig" class="com.baomidou.mybatisplus.MybatisConfiguration">
		<property name="mapUnderscoreToCamelCase" value="true" />
		<!-- 部分数据库不识别默认的NULL类型（比如oracle，需要配置该属性 -->
		<property name="jdbcTypeForNull">
			<util:constant static-field="org.apache.ibatis.type.JdbcType.NULL" />
		</property>
	</bean>

	<!-- 定义 MP 全局策略 -->
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<!-- 逻辑删除 定义下面3个参数 -->
		<property name="sqlInjector" ref="logicSqlInjector" />
		<property name="logicDeleteValue" value="-1" />
		<property name="logicNotDeleteValue" value="1" />
		<!-- 全局ID类型： 0, "数据库ID自增"， 1, "用户输入ID", 2, "全局唯一ID", 3, "全局唯一ID" -->
		<property name="idType" value="2" />
		<!-- 2.1-gamma+ 数据库自动识别，无需配置数据库类型 <property name="dbType" value="mysql" 
			/> -->
		<!--主键Sequence -->
		<property name="keyGenerator" ref="keyGenerator" />
		<!-- 公共字段填充处理器 -->
		<!-- <property name="metaObjectHandler" ref="myMetaObjectHandler" /> -->
		<!--数据库关键字转义符，'desc', "desc" 2.1-gamma+不需要制定 -->
		<!--<property name="identifierQuote" value="'" /> -->
	</bean>

	<!-- 配置oracle主键Sequence， 其他类型数据库，请配置相应的类型 -->
	<bean id="keyGenerator" class="com.baomidou.mybatisplus.incrementer.OracleKeyGenerator" />

	<!-- 自定义处理器 -->
	<!-- <bean id="myMetaObjectHandler" class="com.baomidou.test.MyMetaObjectHandler" /> -->
	<!-- 逻辑删除Sql注入器 -->
	<bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector" />

	<!-- 配置mybatis 扫描mapper接口的路径, 相当于注解@MapperScan，@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper") -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.stone.webapp.mapper" />
	</bean>

	<!-- transaction support -->
	<!-- PlatformTransactionMnager -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED"  rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
	<aop:config>
        <aop:pointcut id="interceptorPointCuts"
            expression="execution(* com.stone.webapp.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
    </aop:config>
	<aop:aspectj-autoproxy />
	
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="txManager" />


	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="11534336" />
	</bean>

</beans>
